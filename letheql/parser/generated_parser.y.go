// Code generated by goyacc -o letheql/parser/generated_parser.y.go letheql/parser/generated_parser.y. DO NOT EDIT.

//line letheql/parser/generated_parser.y:15
package parser

import __yyfmt__ "fmt"

//line letheql/parser/generated_parser.y:15

import (
	"math"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/model/histogram"
	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/model/value"
	"github.com/prometheus/prometheus/promql/parser/posrange"

	"github.com/prometheus/common/model"
)

//line letheql/parser/generated_parser.y:32
type yySymType struct {
	yys         int
	node        Node
	item        Item
	matchers    []*labels.Matcher
	matcher     *labels.Matcher
	label       labels.Label
	labels      labels.Labels
	lblList     []labels.Label
	strings     []string
	series      []SequenceValue
	histogram   *histogram.FloatHistogram
	descriptors map[string]interface{}
	bucket_set  []float64
	int         int64
	uint        uint64
	float       float64
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const OPEN_HIST = 57358
const CLOSE_HIST = 57359
const METRIC_IDENTIFIER = 57360
const NUMBER = 57361
const RIGHT_BRACE = 57362
const RIGHT_BRACKET = 57363
const RIGHT_PAREN = 57364
const SEMICOLON = 57365
const SPACE = 57366
const STRING = 57367
const TIMES = 57368
const histogramDescStart = 57369
const SUM_DESC = 57370
const COUNT_DESC = 57371
const SCHEMA_DESC = 57372
const OFFSET_DESC = 57373
const NEGATIVE_OFFSET_DESC = 57374
const BUCKETS_DESC = 57375
const NEGATIVE_BUCKETS_DESC = 57376
const ZERO_BUCKET_DESC = 57377
const ZERO_BUCKET_WIDTH_DESC = 57378
const CUSTOM_VALUES_DESC = 57379
const COUNTER_RESET_HINT_DESC = 57380
const histogramDescEnd = 57381
const operatorsStart = 57382
const ADD = 57383
const DIV = 57384
const EQLC = 57385
const EQL_REGEX = 57386
const GTE = 57387
const GTR = 57388
const LAND = 57389
const LOR = 57390
const LSS = 57391
const LTE = 57392
const LUNLESS = 57393
const MOD = 57394
const MUL = 57395
const NEQ = 57396
const NEQ_REGEX = 57397
const PIPE_EQL = 57398
const PIPE_REGEX = 57399
const POW = 57400
const SUB = 57401
const AT = 57402
const ATAN2 = 57403
const operatorsEnd = 57404
const aggregatorsStart = 57405
const AVG = 57406
const BOTTOMK = 57407
const COUNT = 57408
const COUNT_VALUES = 57409
const GROUP = 57410
const MAX = 57411
const MIN = 57412
const QUANTILE = 57413
const STDDEV = 57414
const STDVAR = 57415
const SUM = 57416
const TOPK = 57417
const LIMITK = 57418
const LIMIT_RATIO = 57419
const aggregatorsEnd = 57420
const keywordsStart = 57421
const BOOL = 57422
const BY = 57423
const GROUP_LEFT = 57424
const GROUP_RIGHT = 57425
const IGNORING = 57426
const OFFSET = 57427
const ON = 57428
const WITHOUT = 57429
const keywordsEnd = 57430
const preprocessorStart = 57431
const START = 57432
const END = 57433
const preprocessorEnd = 57434
const counterResetHintsStart = 57435
const UNKNOWN_COUNTER_RESET = 57436
const COUNTER_RESET = 57437
const NOT_COUNTER_RESET = 57438
const GAUGE_TYPE = 57439
const counterResetHintsEnd = 57440
const startSymbolsStart = 57441
const START_METRIC = 57442
const START_SERIES_DESCRIPTION = 57443
const START_EXPRESSION = 57444
const START_METRIC_SELECTOR = 57445
const startSymbolsEnd = 57446

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"OPEN_HIST",
	"CLOSE_HIST",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"histogramDescStart",
	"SUM_DESC",
	"COUNT_DESC",
	"SCHEMA_DESC",
	"OFFSET_DESC",
	"NEGATIVE_OFFSET_DESC",
	"BUCKETS_DESC",
	"NEGATIVE_BUCKETS_DESC",
	"ZERO_BUCKET_DESC",
	"ZERO_BUCKET_WIDTH_DESC",
	"CUSTOM_VALUES_DESC",
	"COUNTER_RESET_HINT_DESC",
	"histogramDescEnd",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"PIPE_EQL",
	"PIPE_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"LIMITK",
	"LIMIT_RATIO",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
	"counterResetHintsStart",
	"UNKNOWN_COUNTER_RESET",
	"COUNTER_RESET",
	"NOT_COUNTER_RESET",
	"GAUGE_TYPE",
	"counterResetHintsEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line letheql/parser/generated_parser.y:1139

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 37,
	1, 145,
	10, 145,
	24, 145,
	-2, 0,
	-1, 63,
	2, 188,
	15, 188,
	81, 188,
	87, 188,
	-2, 106,
	-1, 64,
	2, 189,
	15, 189,
	81, 189,
	87, 189,
	-2, 107,
	-1, 65,
	2, 190,
	15, 190,
	81, 190,
	87, 190,
	-2, 109,
	-1, 66,
	2, 191,
	15, 191,
	81, 191,
	87, 191,
	-2, 110,
	-1, 67,
	2, 192,
	15, 192,
	81, 192,
	87, 192,
	-2, 111,
	-1, 68,
	2, 193,
	15, 193,
	81, 193,
	87, 193,
	-2, 116,
	-1, 69,
	2, 194,
	15, 194,
	81, 194,
	87, 194,
	-2, 118,
	-1, 70,
	2, 195,
	15, 195,
	81, 195,
	87, 195,
	-2, 120,
	-1, 71,
	2, 196,
	15, 196,
	81, 196,
	87, 196,
	-2, 121,
	-1, 72,
	2, 197,
	15, 197,
	81, 197,
	87, 197,
	-2, 122,
	-1, 73,
	2, 198,
	15, 198,
	81, 198,
	87, 198,
	-2, 123,
	-1, 74,
	2, 199,
	15, 199,
	81, 199,
	87, 199,
	-2, 124,
	-1, 75,
	2, 200,
	15, 200,
	81, 200,
	87, 200,
	-2, 128,
	-1, 76,
	2, 201,
	15, 201,
	81, 201,
	87, 201,
	-2, 129,
	-1, 129,
	41, 253,
	42, 253,
	52, 253,
	53, 253,
	59, 253,
	-2, 20,
	-1, 230,
	9, 250,
	12, 250,
	13, 250,
	18, 250,
	19, 250,
	25, 250,
	41, 250,
	47, 250,
	48, 250,
	51, 250,
	59, 250,
	64, 250,
	65, 250,
	66, 250,
	67, 250,
	68, 250,
	69, 250,
	70, 250,
	71, 250,
	72, 250,
	73, 250,
	74, 250,
	75, 250,
	76, 250,
	77, 250,
	81, 250,
	85, 250,
	87, 250,
	90, 250,
	91, 250,
	-2, 0,
	-1, 231,
	9, 250,
	12, 250,
	13, 250,
	18, 250,
	19, 250,
	25, 250,
	41, 250,
	47, 250,
	48, 250,
	51, 250,
	59, 250,
	64, 250,
	65, 250,
	66, 250,
	67, 250,
	68, 250,
	69, 250,
	70, 250,
	71, 250,
	72, 250,
	73, 250,
	74, 250,
	75, 250,
	76, 250,
	77, 250,
	81, 250,
	85, 250,
	87, 250,
	90, 250,
	91, 250,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 879

var yyAct = [...]int16{
	172, 368, 366, 175, 373, 260, 39, 222, 310, 52,
	183, 324, 86, 133, 84, 112, 325, 6, 206, 44,
	121, 120, 119, 201, 380, 381, 382, 383, 122, 148,
	176, 112, 336, 124, 123, 228, 61, 229, 230, 231,
	118, 336, 91, 93, 94, 363, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 111, 92, 180, 126, 304, 128, 127, 362, 129,
	202, 180, 367, 179, 143, 108, 125, 111, 302, 338,
	305, 179, 59, 392, 301, 300, 110, 298, 327, 113,
	116, 218, 135, 181, 294, 181, 216, 130, 306, 122,
	117, 115, 110, 181, 226, 123, 118, 114, 299, 293,
	297, 182, 345, 182, 217, 2, 3, 4, 5, 215,
	167, 182, 185, 186, 187, 188, 189, 190, 191, 144,
	169, 200, 169, 169, 169, 169, 169, 169, 169, 194,
	197, 192, 180, 193, 252, 124, 374, 224, 79, 7,
	35, 227, 179, 214, 212, 356, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 225, 355, 354, 353, 116, 196,
	250, 251, 352, 142, 351, 253, 254, 358, 117, 115,
	169, 169, 195, 170, 118, 170, 170, 170, 170, 170,
	170, 170, 113, 116, 350, 10, 357, 207, 349, 208,
	348, 208, 347, 117, 115, 81, 346, 135, 296, 118,
	114, 90, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	141, 174, 140, 326, 36, 322, 323, 136, 180, 210,
	112, 210, 303, 170, 170, 1, 62, 134, 179, 209,
	211, 209, 211, 50, 8, 295, 185, 328, 37, 80,
	88, 60, 112, 49, 9, 9, 169, 91, 93, 94,
	181, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 111, 92, 182, 91,
	93, 334, 56, 335, 337, 391, 339, 48, 171, 47,
	102, 103, 55, 340, 341, 205, 108, 109, 111, 92,
	204, 110, 344, 46, 390, 147, 333, 389, 330, 177,
	178, 332, 45, 203, 77, 56, 43, 343, 360, 170,
	361, 171, 145, 110, 342, 55, 331, 329, 369, 370,
	371, 365, 78, 198, 372, 184, 376, 375, 378, 377,
	263, 87, 56, 136, 384, 385, 42, 77, 171, 386,
	273, 85, 55, 134, 257, 388, 279, 87, 256, 213,
	359, 132, 146, 262, 88, 78, 88, 85, 41, 40,
	393, 51, 139, 255, 77, 83, 221, 138, 387, 307,
	88, 89, 219, 258, 82, 275, 276, 379, 173, 277,
	137, 261, 78, 53, 131, 17, 79, 0, 0, 290,
	0, 22, 264, 266, 268, 269, 270, 278, 280, 283,
	284, 285, 286, 287, 291, 292, 263, 0, 265, 267,
	271, 272, 274, 281, 282, 0, 273, 0, 288, 289,
	18, 19, 279, 0, 20, 0, 259, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 11, 12, 14,
	15, 16, 21, 23, 25, 26, 27, 28, 29, 33,
	34, 275, 276, 0, 13, 277, 0, 0, 24, 0,
	30, 0, 0, 31, 32, 290, 0, 0, 264, 266,
	268, 269, 270, 278, 280, 283, 284, 285, 286, 287,
	291, 292, 0, 0, 265, 267, 271, 272, 274, 281,
	282, 0, 0, 56, 288, 289, 54, 79, 0, 57,
	0, 0, 22, 55, 0, 0, 199, 168, 220, 58,
	0, 0, 180, 0, 56, 223, 0, 0, 0, 226,
	171, 0, 179, 0, 55, 77, 0, 0, 0, 0,
	0, 18, 19, 0, 0, 20, 0, 0, 0, 0,
	0, 0, 0, 78, 181, 0, 77, 0, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 182, 0, 78, 13, 0, 0, 0, 24,
	0, 30, 0, 0, 31, 32, 56, 38, 112, 54,
	79, 0, 57, 309, 0, 22, 55, 0, 0, 0,
	308, 0, 58, 0, 312, 313, 311, 318, 320, 317,
	319, 314, 315, 316, 321, 0, 93, 0, 77, 0,
	0, 0, 0, 0, 18, 19, 102, 103, 20, 0,
	0, 0, 108, 0, 111, 92, 78, 0, 0, 0,
	0, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 0, 0, 0, 13, 110,
	0, 0, 24, 0, 30, 0, 56, 31, 32, 54,
	79, 0, 57, 364, 0, 22, 55, 0, 0, 0,
	0, 0, 58, 0, 312, 313, 311, 318, 320, 317,
	319, 314, 315, 316, 321, 0, 0, 0, 77, 0,
	17, 35, 0, 0, 18, 19, 22, 0, 20, 0,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 18, 19, 0, 13, 20,
	0, 0, 24, 0, 30, 0, 0, 31, 32, 0,
	0, 0, 11, 12, 14, 15, 16, 21, 23, 25,
	26, 27, 28, 29, 33, 34, 112, 0, 0, 13,
	0, 0, 0, 24, 0, 30, 0, 0, 31, 32,
	0, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 91, 93, 94, 0, 95, 96, 97,
	0, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 111, 92, 91, 93, 94, 0, 95, 96,
	0, 0, 99, 100, 0, 102, 103, 104, 105, 106,
	107, 108, 109, 111, 92, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110,
}

var yyPact = [...]int16{
	15, 139, 708, 708, 597, 403, -1000, -1000, -1000, 137,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 375, -1000, 219, -1000, 236,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 161, 18, 130, -1000, -1000, 677, -1000, 677,
	135, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 361,
	-1000, -1000, 390, -1000, -1000, 238, 179, -1000, -1000, 50,
	-1000, -51, -51, -51, -51, -51, -51, -51, -51, -51,
	-51, -51, -51, -51, -51, -51, -51, -51, -51, -51,
	535, 239, 353, 293, 293, 293, 293, 293, 293, 130,
	-53, -1000, 177, 177, 514, -1000, 1, 48, 17, -18,
	-1000, 313, -1000, -1000, 205, 207, -1000, -1000, 359, -1000,
	94, -1000, 89, 533, 677, -1000, -49, -44, -1000, 677,
	677, 677, 677, 677, 677, 677, 677, 677, 677, 677,
	677, 677, 677, 677, 677, 677, 677, -1000, -1000, -1000,
	293, 293, -1000, 129, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 133, 133, 372, -1000, 161, 136, 136, -18, -18,
	-18, -18, -1000, -1000, -1000, 434, -1000, -1000, 87, -1000,
	236, -1000, -1000, -1000, 245, -1000, 85, -1000, -1000, -1000,
	-1000, -1000, 83, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	58, 52, 39, -1000, -1000, -1000, 596, 594, 177, 177,
	177, 177, 17, 17, 258, 258, 258, 793, 772, 258,
	258, 793, 17, 17, 258, 258, 258, 258, 17, 594,
	-18, 48, 66, -1000, -1000, -1000, 326, -1000, 324, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 677, -1000, -1000, -1000, -1000, -1000,
	-1000, 22, 22, 53, 22, 88, 88, 320, 95, -1000,
	-1000, 210, 206, 204, 202, 198, 178, 176, 171, 170,
	169, 149, -1000, -1000, -1000, -1000, -1000, -1000, 185, -1000,
	-1000, -1000, 358, -1000, 236, -1000, -1000, -1000, 22, -1000,
	42, 19, 676, -1000, -1000, -1000, 13, 54, 54, 54,
	133, 132, 132, 13, 132, 13, -70, -1000, -1000, -1000,
	-1000, -1000, 22, 22, -1000, -1000, -1000, 22, -1000, -1000,
	-1000, -1000, -1000, -1000, 54, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 303, -1000, 62,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 414, 13, 413, 5, 18, 411, 271, 82, 408,
	12, 407, 205, 264, 404, 14, 403, 16, 11, 402,
	401, 7, 399, 8, 4, 398, 2, 1, 3, 396,
	30, 0, 391, 389, 22, 129, 388, 382, 6, 366,
	353, 21, 342, 36, 336, 19, 332, 325, 323, 309,
	307, 273, 263, 9, 256, 10, 255, 244,
}

var yyR1 = [...]int8{
	0, 56, 56, 56, 56, 56, 56, 56, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 33, 33, 33, 33, 34, 34, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 35, 37, 37, 47,
	47, 42, 42, 42, 42, 17, 17, 17, 17, 16,
	16, 16, 4, 4, 4, 39, 41, 41, 40, 40,
	40, 48, 55, 46, 46, 32, 32, 32, 9, 9,
	44, 50, 50, 50, 50, 50, 50, 51, 52, 52,
	52, 43, 43, 43, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 13, 13, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	12, 12, 12, 12, 14, 14, 14, 15, 15, 15,
	15, 15, 15, 15, 57, 20, 20, 20, 20, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 29, 29,
	29, 21, 21, 21, 21, 22, 22, 22, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 24,
	24, 25, 25, 25, 11, 11, 11, 11, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 5, 5, 5, 5, 45, 45, 28,
	28, 30, 30, 31, 31, 27, 26, 26, 49, 10,
	18, 18, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 54,
}

var yyR2 = [...]int8{
	0, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 2, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 1, 0, 1, 3,
	3, 1, 1, 3, 3, 3, 4, 2, 1, 3,
	1, 2, 1, 1, 1, 2, 3, 2, 3, 1,
	2, 3, 1, 3, 3, 3, 5, 3, 1, 1,
	4, 6, 5, 6, 5, 4, 3, 2, 2, 1,
	1, 3, 4, 2, 3, 1, 2, 3, 3, 1,
	3, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 2, 0, 3, 1, 2, 3, 3, 1,
	3, 3, 2, 1, 2, 0, 3, 2, 1, 1,
	3, 1, 3, 4, 1, 3, 5, 5, 1, 1,
	1, 4, 3, 3, 2, 3, 1, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 2, 1, 1, 1,
	0, 1, 1, 2, 3, 3, 3, 3, 3, 3,
	1, 3,
}

var yyChk = [...]int16{
	-1000, -56, 100, 101, 102, 103, 2, 10, -13, -7,
	-12, 64, 65, 81, 66, 67, 68, 12, 47, 48,
	51, 69, 18, 70, 85, 71, 72, 73, 74, 75,
	87, 90, 91, 76, 77, 13, -57, -13, 10, -38,
	-33, -36, -39, -44, -45, -46, -48, -49, -50, -51,
	-52, -32, -53, -3, 12, 19, 9, 15, 25, -8,
	-7, -43, -54, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 41, 59, 13,
	-52, -12, -14, 20, -15, 12, -10, 2, 25, -20,
	2, 41, 61, 42, 43, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	85, 60, 14, 41, 59, 53, 42, 52, 58, -34,
	-41, 2, 81, 87, 15, -41, -38, -53, -38, -53,
	-43, -1, 20, -2, 12, -10, 2, 20, 7, 2,
	4, 2, 4, 24, -35, -42, -37, -47, 80, -35,
	-35, -35, -35, -35, -35, -35, -35, -35, -35, -35,
	-35, -35, -35, -35, -35, -35, -35, -53, 2, -45,
	-8, 15, -31, -9, 2, -28, -30, 90, 91, 19,
	9, 41, 59, -55, 2, -53, -53, -53, -53, -53,
	-53, -53, -41, -34, -17, 15, 2, -17, -40, 22,
	-38, 22, 22, 20, 7, 2, -5, 2, 4, 54,
	44, 55, -5, 20, -15, 25, 2, 25, 2, -19,
	5, -29, -21, 12, -28, -30, 16, -38, 84, 86,
	82, 83, -38, -38, -38, -38, -38, -38, -38, -38,
	-38, -38, -38, -38, -38, -38, -38, -38, -38, -38,
	-53, -53, 15, -28, -28, 21, 6, 2, -16, 22,
	-4, -6, 25, 2, 64, 80, 65, 81, 66, 67,
	68, 82, 83, 12, 84, 47, 48, 51, 69, 18,
	70, 85, 86, 71, 72, 73, 74, 75, 90, 91,
	61, 76, 77, 22, 7, 20, -2, 25, 2, 25,
	2, 26, 26, -30, 26, 41, 59, -22, 24, 17,
	-23, 30, 28, 29, 35, 36, 37, 33, 31, 34,
	32, 38, -17, -17, -18, -17, -18, 22, -55, 21,
	2, 22, 7, 2, -38, -27, 19, -27, 26, -27,
	-21, -21, 24, 17, 2, 17, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 21, 2, 22,
	-4, -27, 26, 26, 17, -23, -26, 59, -27, -31,
	-31, -31, -28, -24, 14, -24, -26, -24, -26, -11,
	94, 95, 96, 97, -27, -27, -27, -25, -31, 24,
	21, 2, 21, -31,
}

var yyDef = [...]int16{
	0, -2, 133, 133, 0, 0, 7, 6, 1, 133,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 0, 2, -2, 3, 4,
	8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 19, 20, 0, 112, 237, 238, 0, 248, 0,
	89, 90, 260, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 231, 232, 0,
	5, 104, 0, 132, 135, 0, 139, 143, 249, 144,
	148, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 24, 0, 0, 0, 65, 0, 20, 87, -2,
	88, 0, 93, 95, 0, 99, 103, 130, 0, 136,
	0, 142, 0, 147, 0, 46, 51, 52, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 252,
	0, 0, 75, 0, 77, 243, 244, 78, 79, 239,
	240, 0, 0, 0, 86, 72, 254, 255, 256, 257,
	258, 259, 21, 22, 25, 0, 58, 26, 0, 67,
	69, 71, 261, 91, 0, 96, 0, 102, 233, 234,
	235, 236, 0, 131, 134, 137, 140, 138, 141, 146,
	149, 151, 154, 158, 159, 160, 0, 27, 0, 0,
	-2, -2, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	253, 0, 0, 241, 242, 80, 0, 85, 0, 57,
	60, 62, 63, 64, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 230, 66, 70, 92, 94, 97, 101, 98,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 50, 53, 251, 54, 76, 0, 82,
	84, 55, 0, 61, 68, 150, 245, 152, 0, 155,
	0, 0, 0, 162, 167, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 83, 56,
	59, 153, 0, 0, 161, 165, 168, 0, 247, 169,
	170, 171, 172, 173, 0, 174, 175, 176, 177, 178,
	184, 185, 186, 187, 156, 157, 246, 0, 182, 0,
	180, 183, 179, 181,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:214
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:217
		{
			yylex.(*parser).addParseErrf(posrange.PositionRange{}, "no expression found in input")
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:219
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:221
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:224
		{
			yylex.(*parser).unexpected("", "")
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:248
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:250
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:252
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:254
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:262
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:268
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:281
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:282
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:283
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:284
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:285
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:286
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:287
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:288
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:289
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:290
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:291
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:292
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:293
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:294
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:295
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:296
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:297
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:298
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:299
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line letheql/parser/generated_parser.y:307
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:312
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:320
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:325
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:335
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:341
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:350
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:352
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:354
		{
			yyVAL.strings = []string{}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:356
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:362
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:364
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:366
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:370
		{
			if !model.LabelName(yyDollar[1].item.Val).IsValid() {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid label name for grouping: %q", yyDollar[1].item.Val)
			}
			yyVAL.item = yyDollar[1].item
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:376
		{
			unquoted := yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			if !model.LabelName(unquoted).IsValid() {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid label name for grouping: %q", unquoted)
			}
			yyVAL.item = yyDollar[1].item
			yyVAL.item.Pos++
			yyVAL.item.Val = unquoted
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:386
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:394
		{
			fn, exist := getFunction(yyDollar[1].item.Val, yylex.(*parser).functions)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			if fn != nil && fn.Experimental && !EnableExperimentalFunctions {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "function %q is not enabled", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: posrange.PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:414
		{
			yyVAL.node = yyDollar[2].node
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:416
		{
			yyVAL.node = Expressions{}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:420
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:422
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:424
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:435
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:443
		{
			if numLit, ok := yyDollar[1].node.(*NumberLiteral); ok {
				if numLit.Val <= 0 {
					yylex.(*parser).addParseErrf(numLit.PositionRange(), "duration must be greater than 0")
					yyVAL.node = &NumberLiteral{Val: 0} // Return 0 on error.
					break
				}
				yyVAL.node = yyDollar[1].node
				break
			}
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:458
		{
			if numLit, ok := yyDollar[3].node.(*NumberLiteral); ok {
				yylex.(*parser).addOffset(yyDollar[1].node, time.Duration(numLit.Val*1000)*time.Millisecond)
				yyVAL.node = yyDollar[1].node
				break
			}
			yylex.(*parser).addOffsetExpr(yyDollar[1].node, yyDollar[3].node.(*DurationExpr))
			yyVAL.node = yyDollar[1].node
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:468
		{
			yylex.(*parser).unexpected("offset", "number or duration")
			yyVAL.node = yyDollar[1].node
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:476
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line letheql/parser/generated_parser.y:481
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:486
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:496
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.OriginalOffset != 0 {
				errMsg = "no offset modifiers allowed before range"
			} else if vs.Timestamp != nil {
				errMsg = "no @ modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, "%s", errMsg)
			}

			var rangeNl time.Duration
			if numLit, ok := yyDollar[3].node.(*NumberLiteral); ok {
				rangeNl = time.Duration(numLit.Val*1000) * time.Millisecond
			}
			rangeExpr, _ := yyDollar[3].node.(*DurationExpr)
			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          rangeNl,
				RangeExpr:      rangeExpr,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line letheql/parser/generated_parser.y:527
		{
			var rangeNl time.Duration
			var stepNl time.Duration
			if numLit, ok := yyDollar[3].node.(*NumberLiteral); ok {
				rangeNl = time.Duration(numLit.Val*1000) * time.Millisecond
			}
			rangeExpr, _ := yyDollar[3].node.(*DurationExpr)
			if numLit, ok := yyDollar[5].node.(*NumberLiteral); ok {
				stepNl = time.Duration(numLit.Val*1000) * time.Millisecond
			}
			stepExpr, _ := yyDollar[5].node.(*DurationExpr)
			yyVAL.node = &SubqueryExpr{
				Expr:      yyDollar[1].node.(Expr),
				Range:     rangeNl,
				RangeExpr: rangeExpr,
				Step:      stepNl,
				StepExpr:  stepExpr,
				EndPos:    yyDollar[6].item.Pos + 1,
			}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line letheql/parser/generated_parser.y:548
		{
			var rangeNl time.Duration
			if numLit, ok := yyDollar[3].node.(*NumberLiteral); ok {
				rangeNl = time.Duration(numLit.Val*1000) * time.Millisecond
			}
			rangeExpr, _ := yyDollar[3].node.(*DurationExpr)
			yyVAL.node = &SubqueryExpr{
				Expr:      yyDollar[1].node.(Expr),
				Range:     rangeNl,
				RangeExpr: rangeExpr,
				EndPos:    yyDollar[5].item.Pos + 1,
			}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line letheql/parser/generated_parser.y:562
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line letheql/parser/generated_parser.y:564
		{
			yylex.(*parser).unexpected("subquery selector", "number or duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:566
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:568
		{
			yylex.(*parser).unexpected("subquery selector", "number or duration")
			yyVAL.node = yyDollar[1].node
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:578
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:596
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:604
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:614
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:622
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:629
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:636
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:645
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:653
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:655
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:659
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:661
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:663
		{
			yyVAL.matcher = yylex.(*parser).newMetricNameMatcher(yyDollar[1].item)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:665
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:667
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:669
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:671
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:679
		{
			b := labels.NewBuilder(yyDollar[2].labels)
			b.Set(labels.MetricName, yyDollar[1].item.Val)
			yyVAL.labels = b.Labels()
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:681
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:688
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:690
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:692
		{
			yyVAL.labels = labels.New()
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line letheql/parser/generated_parser.y:694
		{
			yyVAL.labels = labels.New()
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:698
		{
			yyVAL.lblList = append(yyDollar[1].lblList, yyDollar[3].label)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:700
		{
			yyVAL.lblList = []labels.Label{yyDollar[1].label}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:702
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.lblList = yyDollar[1].lblList
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:707
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:709
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:711
		{
			yyVAL.label = labels.Label{Name: labels.MetricName, Value: yyDollar[1].item.Val}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:713
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:715
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:717
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
			yyVAL.label = labels.Label{}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:719
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:730
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line letheql/parser/generated_parser.y:739
		{
			yyVAL.series = []SequenceValue{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:741
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:743
		{
			yyVAL.series = yyDollar[1].series
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:745
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:749
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:751
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:758
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:760
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:768
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:778
		{
			yyVAL.series = []SequenceValue{{Histogram: yyDollar[1].histogram}}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:782
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Histogram: yyDollar[1].histogram})
				//$1 += $2
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line letheql/parser/generated_parser.y:791
		{
			val, err := yylex.(*parser).histogramsIncreaseSeries(yyDollar[1].histogram, yyDollar[3].histogram, yyDollar[5].uint)
			if err != nil {
				yylex.(*parser).addSemanticError(err)
			}
			yyVAL.series = val
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line letheql/parser/generated_parser.y:799
		{
			val, err := yylex.(*parser).histogramsDecreaseSeries(yyDollar[1].histogram, yyDollar[3].histogram, yyDollar[5].uint)
			if err != nil {
				yylex.(*parser).addSemanticError(err)
			}
			yyVAL.series = val
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:809
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:821
		{
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&yyDollar[2].descriptors)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:825
		{
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&yyDollar[2].descriptors)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:829
		{
			m := yylex.(*parser).newMap()
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&m)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:834
		{
			m := yylex.(*parser).newMap()
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&m)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:842
		{
			yyVAL.descriptors = *(yylex.(*parser).mergeMaps(&yyDollar[1].descriptors, &yyDollar[3].descriptors))
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:846
		{
			yyVAL.descriptors = yyDollar[1].descriptors
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:849
		{
			yylex.(*parser).unexpected("histogram description", "histogram description key, e.g. buckets:[5 10 7]")
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:856
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["schema"] = yyDollar[3].int
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:861
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["sum"] = yyDollar[3].float
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:866
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["count"] = yyDollar[3].float
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:871
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["z_bucket"] = yyDollar[3].float
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:876
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["z_bucket_w"] = yyDollar[3].float
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:881
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["custom_values"] = yyDollar[3].bucket_set
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:886
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["buckets"] = yyDollar[3].bucket_set
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:891
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["offset"] = yyDollar[3].int
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:896
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["n_buckets"] = yyDollar[3].bucket_set
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:901
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["n_offset"] = yyDollar[3].int
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:906
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["counter_reset_hint"] = yyDollar[3].item
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line letheql/parser/generated_parser.y:913
		{
			yyVAL.bucket_set = yyDollar[2].bucket_set
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:917
		{
			yyVAL.bucket_set = yyDollar[2].bucket_set
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:923
		{
			yyVAL.bucket_set = append(yyDollar[1].bucket_set, yyDollar[3].float)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:927
		{
			yyVAL.bucket_set = []float64{yyDollar[1].float}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:953
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:960
		{
			var err error
			var dur time.Duration
			dur, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
			yyVAL.node = &NumberLiteral{
				Val:      dur.Seconds(),
				PosRange: yyDollar[1].item.PositionRange(),
				Duration: true,
			}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:976
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:980
		{
			var err error
			var dur time.Duration
			dur, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
			yyVAL.float = dur.Seconds()
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:991
		{
			yyVAL.float = yyDollar[2].float
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:992
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:998
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:1007
		{
			yyVAL.int = -int64(yyDollar[2].uint)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:1008
		{
			yyVAL.int = int64(yyDollar[1].uint)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:1012
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:1021
		{
			yyVAL.item = Item{
				Typ: METRIC_IDENTIFIER,
				Pos: yyDollar[1].item.PositionRange().Start,
				Val: yylex.(*parser).unquoteString(yyDollar[1].item.Val),
			}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line letheql/parser/generated_parser.y:1034
		{
			yyVAL.strings = nil
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line letheql/parser/generated_parser.y:1043
		{
			nl := yyDollar[1].node.(*NumberLiteral)
			if nl.Val > 1<<63/1e9 || nl.Val < -(1<<63)/1e9 {
				yylex.(*parser).addParseErrf(nl.PosRange, "duration out of range")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
			yyVAL.node = nl
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line letheql/parser/generated_parser.y:1053
		{
			switch expr := yyDollar[2].node.(type) {
			case *NumberLiteral:
				if yyDollar[1].item.Typ == SUB {
					expr.Val *= -1
				}
				if expr.Val > 1<<63/1e9 || expr.Val < -(1<<63)/1e9 {
					yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "duration out of range")
					yyVAL.node = &NumberLiteral{Val: 0}
					break
				}
				expr.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = expr
				break
			case *DurationExpr:
				if yyDollar[1].item.Typ == SUB {
					yyVAL.node = &DurationExpr{
						Op:       SUB,
						RHS:      expr,
						StartPos: yyDollar[1].item.Pos,
					}
					break
				}
				yyVAL.node = expr
				break
			default:
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "expected number literal or duration expression")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:1085
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			yyVAL.node = &DurationExpr{Op: ADD, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:1090
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			yyVAL.node = &DurationExpr{Op: SUB, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:1095
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			yyVAL.node = &DurationExpr{Op: MUL, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:1100
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			if nl, ok := yyDollar[3].node.(*NumberLiteral); ok && nl.Val == 0 {
				yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "division by zero")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
			yyVAL.node = &DurationExpr{Op: DIV, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:1110
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			if nl, ok := yyDollar[3].node.(*NumberLiteral); ok && nl.Val == 0 {
				yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "modulo by zero")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
			yyVAL.node = &DurationExpr{Op: MOD, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:1120
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			yyVAL.node = &DurationExpr{Op: POW, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line letheql/parser/generated_parser.y:1128
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[2].node.(Expr))
			if durationExpr, ok := yyDollar[2].node.(*DurationExpr); ok {
				durationExpr.Wrapped = true
				yyVAL.node = durationExpr
				break
			}
			yyVAL.node = yyDollar[2].node
		}
	}
	goto yystack /* stack new state and value */
}
